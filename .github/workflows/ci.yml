name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 确保拉取完整仓库

      - name: 确认项目结构
        run: ls -R  # 列出所有文件，确保 pom.xml 存在

      - name: 设置 JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'

      - name: 配置 Maven 依赖缓存
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-${{ runner.os }}

      - name: 编译项目
        run: mvn clean compile

      - name: 运行单元测试 & 生成 JaCoCo 覆盖率报告
        run: mvn test

      - name: 检查 GitHub 访问
        run: curl -I https://api.github.com/repos/actions/upload-artifact/releases/latest

      # - name: 上传 JaCoCo 覆盖率报告（可选）
      #   uses: actions/upload-artifact@v3  # 确保明确版本
      #   with:
      #     name: jacoco-report
      #     path: target/site/jacoco/

      - name: 打包应用（可选）
        run: mvn package -DskipTests

      - name: CI已完成
        run: echo "CI Pipeline 执行完毕"

      # - name: 构建 Docker 镜像（可选）
      #   if: success()
      #   run: docker build -t my-app:latest .

      # - name: 登录 Docker Hub 并推送镜像（可选）
      #   if: success() && github.event_name == 'push'
      #   env:
      #     DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
      #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      #   run: |
      #     echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
      #     docker tag my-app:latest $DOCKER_USER/my-app:latest
      #     docker push $DOCKER_USER/my-app:latest
